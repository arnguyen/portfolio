{"version":3,"sources":["welcome.js","about.js","experience.js","resume.js","contact.js","portfolio.js","serviceWorker.js","index.js"],"names":["Intro","props","className","id","defaultProps","About","state","src","alt","React","Component","Experience","Resume","Contact","HEADER_OPTIONS","Portfolio","changeTheme","theme","setState","changeView","e","activeView","target","value","this","changeThemeTo","map","item","i","key","classNames","type","onClick","view","renderHeader","renderView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAIA,SAASA,EAAMC,GAAQ,IACXC,EAAcD,EAAdC,UAER,OACE,yBAAKC,GAAG,WACN,wBAAID,UAAWA,GAAf,uBAURF,EAAMI,aAAe,CACjBF,UAAW,IAGAF,QC0BAK,G,wDA7CX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,GAHE,E,qDAOf,OACE,yBAAKH,GAAG,SACN,yBAAKA,GAAG,SAASI,IAAI,cAAcC,IAAI,WACvC,qoBAQA,ycAMA,kVAKA,oSAKA,qGAGA,2C,GAtCQC,IAAMC,YCiBXC,E,kDAjBX,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,GAHE,E,qDAOf,OACE,6BACE,4D,GAVaG,IAAMC,WCkBhBE,E,kDAjBX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,GAHE,E,qDAOf,OACE,6BACE,yE,GAVSG,IAAMC,WCiBZG,E,kDAhBX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAO,GAHG,E,qDAOf,OACE,6BACE,iDACA,kD,GAXUG,IAAMC,WCOtBI,EAAiB,CAAC,UAAW,QAAS,aAAc,SAAU,WAmGrDC,E,kDAhGX,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAQRe,YAAc,WAGE,UAFI,EAAKV,MAAfW,MAGJ,EAAKC,SAAS,CAAED,MAAO,SAEvB,EAAKC,SAAS,CAAED,MAAO,WAfV,EAmBnBE,WAAa,SAACC,GACZ,EAAKF,SAAS,CAAEG,WAAYD,EAAEE,OAAOC,SAjBrC,EAAKjB,MAAQ,CACTW,MAAO,QACPI,WAAY,WALC,E,2DAuBH,IAAD,SACiBG,KAAKlB,MAA3BW,EADK,EACLA,MAAOI,EADF,EACEA,WAETI,EAA0B,UAAVR,EAAoB,cAAgB,aAE1D,OACE,yBAAKf,UAAU,UACb,4BAEIY,EAAeY,KAAI,SAACC,EAAMC,GAAP,OAEjB,wBAAIC,IAAKD,GACP,4BACE1B,UAAW4B,IAAW,gBAAiBT,IAAeM,EAAO,cAAe,UAC5EI,KAAK,SACLR,MAAOI,EACPK,QAAS,EAAKb,YAEbQ,QAMX,4BACExB,GAAG,eACH4B,KAAK,SACLC,QAASR,KAAKR,aAEZS,M,mCAMI,IAGRQ,EAEJ,OAJuBT,KAAKlB,MAApBe,YAKN,IAAK,QACHY,EAAO,kBAAC,EAAD,MACP,MACF,IAAK,aACHA,EAAO,kBAAC,EAAD,MACP,MACF,IAAK,SACHA,EAAO,kBAAC,EAAD,MACP,MACF,IAAK,UACHA,EAAO,kBAAC,EAAD,MACP,MACF,QACEA,EAAO,kBAAC,EAAD,CAAS/B,UAAU,UAI9B,OAAO+B,I,+BAGC,IACAhB,EAAUO,KAAKlB,MAAfW,MAER,OACE,yBAAKf,UAAW4B,IAAW,YAAab,IACrCO,KAAKU,eACLV,KAAKW,kB,GA3FQ1B,IAAMC,WCCV0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3185fdd4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './welcome.css';\n\nfunction Intro(props) {\n    const { className } = props;\n\n    return (\n      <div id=\"welcome\">\n        <h1 className={className}>Hello. I&apos;m Andrew.</h1>\n        \n      </div>\n    )\n}\n\nIntro.propTypes = {\n    className: PropTypes.string\n}\n\nIntro.defaultProps = {\n    className: ''\n}\n\nexport default Intro;","import React from 'react';\nimport './about.css';\n\nclass About extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n          <div id=\"about\">\n            <img id=\"my-pic\" src=\"mainpic.jpg\" alt='My pic' />\n            <p>\n              Hello! It&apos;s great to meet you. I&apos;m Andrew, a junior studying computer science at the University of Michigan. \n              My passion for computer science and programming actually started when I took my very first programming course, and \n              fell in love with it! Through my time in school, I have taken a wide variety of interesting CS courses, including \n              those learning about different data structures and algorithms, and one where I got to work with python and Spotify API \n              data to create unique data visualizations. Funny enough however, my favorite class I&apos;ve taken had nothing to do \n              with CS, and was about classic civilizations!\n            </p>\n            <p>\n              Outside of my classes, I&apos;ve been involved in numerous student organizations on campus, including a few of my favorites,\n              the Alternate Reality Initiative, where I got to work extensively with UX and virtual reality, the Michigan Business Club,\n              where I was able to expand my interests in learning about different aspects of business, and of course, the time I got to \n              work as a research assistant studying behavioral game theory! \n            </p>\n            <p>\n              Through my experiences at school, I&apos;ve gained a deep interests in more theoretical fields of technology such as \n              machine learning and artifical intelligence. I&apos;ve also developed strong interests in virtual reality as well \n              as front-end web development, where I get to work on desiging strong user experiences. \n            </p>\n            <p>\n              When I&apos;m not working, I like to spend time with healthy practices like running and working out, as well as reading \n              and meditating. Of course, I have quite a strong sweet tooth, and enjoy baking as well. On the more creative side,\n              I&apos;ve recently taken up drawing! \n            </p>\n            <p>\n              Feel free to ask me about any of my interests, technical or otherwise! \n            </p>\n            <p>\n              -Andrew\n            </p>\n          </div> \n        )\n    }\n}\n\nexport default About;","import React from 'react';\n\nclass Experience extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n          <div>\n            <p>\n              I have worked at Amazon.\n            </p>\n          </div> \n        )\n    }\n}\n\nexport default Experience;","import React from 'react';\n\nclass Resume extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n          <div>\n            <p>\n              Feel free to download my resume here.    \n            </p>\n          </div> \n        )\n    }\n}\n\nexport default Resume;","import React from 'react';\n\nclass Contact extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state ={}\n    }\n\n    render() {\n        return (\n          <div>\n            <p>ngandrew@umich.edu</p>\n            <p>(248) 904-3173</p>\n          </div>\n        )\n    }\n}\n\nexport default Contact;","import React from 'react';\nimport classNames from 'classnames';\nimport './portfolio.css';\nimport Welcome from './welcome';\nimport About from './about';\nimport Experience from './experience';\nimport Resume from './resume';\nimport Contact from './contact';\n\nconst HEADER_OPTIONS = ['Welcome', 'About', 'Experience', 'Resume', 'Contact']\n\nclass Portfolio extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n          theme: 'light',\n          activeView: 'Welcome'\n      };\n  }\n\n    changeTheme = () => {\n      const { theme } = this.state;\n\n      if (theme === 'light') {\n          this.setState({ theme: 'dark' });\n      } else {\n          this.setState({ theme: 'light' });\n      }\n    };\n\n    changeView = (e) => {\n      this.setState({ activeView: e.target.value });\n    }\n\n    renderHeader() {\n      const { theme, activeView } = this.state;\n\n      const changeThemeTo = theme === 'light' ? 'Light Theme' : 'Dark Theme';\n\n      return (\n        <div className=\"header\">\n          <ul>\n            {\n              HEADER_OPTIONS.map((item, i) => (\n                // eslint-disable-next-line react/no-array-index-key\n                <li key={i}>\n                  <button\n                    className={classNames('header-option', activeView === item ? 'active-view': 'hidden')}\n                    type=\"button\"\n                    value={item}\n                    onClick={this.changeView}\n                  >\n                    {item}\n                  </button>\n                </li>\n              ))\n            }\n          </ul>\n          <button\n            id=\"theme-button\"\n            type=\"button\"\n            onClick={this.changeTheme}\n          >\n            { changeThemeTo }\n          </button>\n        </div>\n      );\n    }\n\n    renderView() {\n      const { activeView } = this.state;\n\n      let view;\n\n      switch(activeView) {\n        case 'About':\n          view = <About />;\n          break;\n        case 'Experience':\n          view = <Experience />;\n          break;\n        case 'Resume':\n          view = <Resume />;\n          break;\n        case 'Contact':\n          view = <Contact />;\n          break;\n        default:\n          view = <Welcome className=\"intro\" />;\n          break;\n      }\n\n      return view;\n    }\n\n    render() {\n      const { theme } = this.state;\n\n      return (\n        <div className={classNames('portfolio', theme)}>\n          {this.renderHeader()}\n          {this.renderView()}\n        </div>\n      );\n    }\n}\n\nexport default Portfolio;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Portfolio from './portfolio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Portfolio />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}