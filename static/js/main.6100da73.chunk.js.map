{"version":3,"sources":["intro.js","header.js","portfolio.js","serviceWorker.js","index.js"],"names":["Intro","props","className","defaultProps","Header","state","options","this","map","item","i","key","type","React","Component","HEADER_OPTIONS","Portfolio","changeTheme","theme","setState","changeThemeTo","classNames","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAGA,SAASA,EAAMC,GAAQ,IACXC,EAAcD,EAAdC,UAER,OACE,6BACE,wBAAIA,UAAWA,GAAf,uBASRF,EAAMG,aAAe,CACjBD,UAAW,IAGAF,QClBTI,E,kDACF,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAEDI,MAAM,GAHI,E,qDAMT,IACEC,EAAYC,KAAKN,MAAjBK,QAER,OACE,6BAGIA,EAAQE,KAAI,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,GAAG,4BAAQE,KAAK,UAAUH,Y,GAdrDI,IAAMC,WAyB3BV,EAAOD,aAAe,CAClBG,QAAS,IAIEF,QC3BTW,EAAiB,CAAC,UAAW,QAAS,aAAc,SAAU,WAsCrDC,E,kDAnCX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAOVgB,YAAc,WAGI,UAFI,EAAKZ,MAAfa,MAGJ,EAAKC,SAAS,CAAED,MAAO,SAEvB,EAAKC,SAAS,CAAED,MAAO,WAX3B,EAAKb,MAAQ,CACTa,MAAO,SAJI,E,qDAkBT,IACEA,EAAUX,KAAKF,MAAfa,MAEFE,EAA0B,UAAVF,EAAoB,YAAc,aAExD,OACE,yBAAKhB,UAAWmB,IAAW,YAAaH,IACtC,kBAAC,EAAD,CAAQZ,QAASS,IACjB,kBAAC,EAAD,CAAOb,UAAU,UACjB,4BAAQoB,GAAG,eAAeV,KAAK,SAASW,QAAShB,KAAKU,aAClDG,Q,GA7BQP,IAAMC,WCIVU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6100da73.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Intro(props) {\n    const { className } = props;\n\n    return (\n      <div>\n        <h1 className={className}>Hello. I&apos;m Andrew.</h1>\n      </div>\n    )\n}\n\nIntro.propTypes = {\n    className: PropTypes.string\n}\n\nIntro.defaultProps = {\n    className: ''\n}\n\nexport default Intro;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state={}\n    }\n\n    render() {\n        const { options } = this.props;\n\n        return (\n          <div>\n            {\n              // eslint-disable-next-line react/no-array-index-key\n              options.map((item, i) => <li key={i}><button type=\"button\">{item}</button></li>)\n            }\n          </div>\n        );\n    }\n}\n\nHeader.propTypes = {\n    options: PropTypes.instanceOf(Array)\n}\n\nHeader.defaultProps = {\n    options: []\n}\n\n\nexport default Header;","import React from 'react';\nimport classNames from 'classnames';\nimport './portfolio.css';\nimport Intro from './intro';\nimport Header from './header';\n\nconst HEADER_OPTIONS = ['Welcome', 'About', 'Experience', 'Resume', 'Contact']\n\nclass Portfolio extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            theme: 'light'\n        };\n    }\n\n    changeTheme = () => {\n        const { theme } = this.state;\n\n        if (theme === 'light') {\n            this.setState({ theme: 'dark' });\n        } else {\n            this.setState({ theme: 'light' });\n        }\n    };\n\n    render() {\n        const { theme } = this.state;\n\n        const changeThemeTo = theme === 'light' ? 'Dark Mode' : 'Light Mode';\n\n        return (\n          <div className={classNames('portfolio', theme)}>\n            <Header options={HEADER_OPTIONS} />\n            <Intro className=\"intro\" />\n            <button id=\"theme-button\" type=\"button\" onClick={this.changeTheme}>\n              { changeThemeTo }\n            </button>\n          </div>\n        );\n    }\n}\n\nexport default Portfolio;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Portfolio from './portfolio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Portfolio />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}